Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pygame\r\nimport datetime\r\nimport random\r\nimport time\r\n\r\n\r\ndef open_windows():\r\n    global fl\r\n    if fl == \"start\":\r\n        first_window()\r\n    if fl == \"help\":\r\n        help_window()\r\n    if fl == \"play\":\r\n        play_window()\r\n\r\n\r\ndef draw_cursor(coord):\r\n    screen.blit(cursor, coord)\r\n\r\n\r\ndef first_window():\r\n    screen.blit(background, (0, 0))\r\n    screen.blit(Bplay, (590, 320))\r\n    screen.blit(Hplay, (550, 640))\r\n    screen.blit(Eplay, (580, 770))\r\n\r\n\r\ndef help_window():\r\n    screen.blit(help_background, (0, 0))\r\n    screen.blit(H_back, (1100, 250))\r\n\r\n\r\ndef play_window():\r\n    global prev_time\r\n    screen.blit(play_background, (0, 0))\r\n    draw_text()\r\n    for i in range(8):\r\n        screen.blit(page, (i * 152, 0))\r\n    screen.blit(tomato, (20, 20))\r\n    screen.blit(sunflower, (175, 20))\r\n    screen.blit(pee, (335, 20))\r\n    screen.blit(nut, (485, 20))\r\n    screen.blit(double_pee, (625, 20))\r\n    screen.blit(cherry, (780, 20))\r\n    screen.blit(thorns, (930, 20))\r\n    screen.blit(shovel, (1080, 20))\r\n    plants_action()\r\n\r\n\r\ndef button_check_start(coord):\r\n    global fl, prev_time\r\n    global running\r\n    x, y = coord[0], coord[1]\r\n    if 940 >= x >= 590 and 480 >= y >= 320:\r\n        fl = \"play\"\r\n        prev_time = time.time()\r\n        open_windows()\r\n        screen.blit(cursor, coord)\r\n        pygame.display.flip()\r\n        pygame.mixer.music.load('1.mp3')\r\n        pygame.mixer.music.play()\r\n    if 1000 >= x >= 550 and 720 >= y >= 640:\r\n        fl = \"help\"\r\n        open_windows()\r\n        screen.blit(cursor, coord)\r\n        pygame.display.flip()\r\n    if 950 >= x >= 580 and 850 >= y >= 770:\r\n        running = False\r\n\r\n\r\ndef button_check_help(coord):\r\n    global fl\r\n    x, y = coord[0], coord[1]\r\n    if 1400 >= x >= 1100 and 700 >= y >= 250:\r\n        fl = \"start\"\r\n        open_windows()\r\n        screen.blit(cursor, coord)\r\n        pygame.display.flip()\r\n\r\n\r\ndef check_score(price):\r\n    global score\r\n    if score >= price:\r\n        return True\r\n    return False\r\n\r\n\r\ndef button_check_play(coord):\r\n    global cherry_bomb_fl, cherry_x, cherry_y\r\n    global fl_cursor, prev_time\r\n    global score\r\n    global cost\r\n    global cursor\r\n    global mas_flowers, sunflower_times\r\n    global flag_sun_1, flag_sun_2, flag_sun_3\r\n    global reload_nut, reload_double_pee, reload_pee, reload_sunflower, reload_tomato, reload_cherry, reload_thorns\r\n    global last_reload_sunflower, last_reload_tomato, last_reload_pee, last_reload_double_pee \\\r\n        , last_reload_nut, last_reload_thorns, last_reload_cherry\r\n    now_time = time.time()\r\n    x, y = coord[0], coord[1]\r\n    if y > 155:\r\n        for i in range(5):\r\n            for j in range(9):\r\n                if square_centres[i][j][0] + 50 >= x >= square_centres[i][j][0] \\\r\n                        and square_centres[i][j][1] + 50 >= y >= square_centres[i][j][1] and flag_sunflowers[i][j] == 1:\r\n                    flag_sunflowers[i][j] = 0\r\n                    score += 50\r\n\r\n    elif 155 >= y >= 0:\r\n        if 155 >= x >= 1 and check_score(50) and int(reload_tomato + 0.999) == 0:\r\n            cursor = tomato\r\n        elif 256 >= x >= 156 and check_score(50) and int(reload_sunflower + 0.999) == 0:\r\n            cursor = sunflower\r\n        elif 406 >= x >= 306 and check_score(100) and int(reload_pee + 0.999) == 0:\r\n            cursor = pee\r\n        elif 556 >= x >= 456 and check_score(50) and int(reload_nut + 0.999) == 0:\r\n            cursor = nut\r\n        elif 706 >= x >= 606 and check_score(200) and int(reload_double_pee + 0.999) == 0:\r\n            cursor = double_pee\r\n        elif 856 >= x >= 756 and check_score(150) and int(reload_cherry + 0.999) == 0:\r\n            cursor = cherry\r\n        elif 1006 >= x >= 906 and check_score(125) and int(reload_thorns + 0.999) == 0:\r\n            cursor = thorns\r\n        elif 1156 >= x >= 1056:\r\n            cursor = shovel\r\n        elif 1400 <= x <= 1450 and 50 <= y <= 100 and flag_sun_1:\r\n            score += 25\r\n            flag_sun_1 = 0\r\n            prev_time = time.time()\r\n        elif 1460 <= x <= 1510 and 80 <= y <= 130 and flag_sun_2:\r\n            score += 25\r\n            flag_sun_2 = 0\r\n            prev_time = time.time()\r\n        elif 1450 <= x <= 1500 and 30 <= y <= 80 and flag_sun_3:\r\n            score += 25\r\n            flag_sun_3 = 0\r\n            prev_time = time.time()\r\n        if 1156 >= x >= 1:\r\n            fl_cursor = \"not const\"\r\n    if fl_cursor == \"not const\" and cursor_const != cursor:\r\n        time_now = time.time()\r\n        if 930 >= y >= 155 and 1550 >= x >= 1:\r\n            x = x // 155\r\n            y = (y - 155) // 155\r\n            if mas_flowers[x][y] == nots and cursor != shovel:\r\n                score -= cost[cursor]\r\n                mas_flowers[x][y] = cursor\r\n                hp_flowers[x][y] = 50\r\n                if cursor == double_pee:\r\n                    dpee_fl.append(time_now)\r\n                    dpee_x.append(x)\r\n                    dpee_y.append(y)\r\n                    dpee_coult.append(time.time())\r\n                    last_dpee_coult.append(time.time())\r\n                    reload_double_pee = 10\r\n                    last_reload_double_pee = time.time()\r\n                if cursor == tomato:\r\n                    tomato_fl.append(time.time())\r\n                    tomato_x.append(x)\r\n                    tomato_y.append(y)\r\n                    reload_tomato = 40\r\n                    last_reload_tomato = time.time()\r\n                if cursor == thorns:\r\n                    thorns_fl.append(time_now)\r\n                    thorns_x.append(x)\r\n                    thorns_y.append(y)\r\n                    reload_thorns = 20\r\n                    last_reload_thorns =  now_time\r\n                if cursor == pee:\r\n                    pee_fl.append(time_now)\r\n                    pee_x.append(x)\r\n                    pee_y.append(y)\r\n                    pee_coult.append( now_time)\r\n                    last_pee_coult.append( now_time)\r\n                    reload_pee = 7\r\n                    last_reload_pee =  now_time\r\n                if cursor == nut:\r\n                    hp_flowers[x][y] = 500\r\n                    reload_nut = 30\r\n                    last_reload_nut =  now_time\r\n                if cursor == sunflower:\r\n                    sunflower_times[x][y] = time_now\r\n                    sunfl_fl.append(time_now)\r\n                    sunfl_x.append(x)\r\n                    sunfl_y.append(y)\r\n                    reload_sunflower = 5\r\n                    last_reload_sunflower =  now_time\r\n                if cursor == cherry:\r\n                    cherry_bomb_fl = time_now\r\n                    cherry_x = x * 150\r\n                    cherry_y = y * 150\r\n                    hp_flowers[x][y] = 1000\r\n                    reload_cherry = 60\r\n                    last_reload_cherry =  now_time\r\n            elif cursor == shovel:\r\n                if mas_flowers[x][y] in thorns_anim:\r\n                    for i in range(len(thorns_x)):\r\n                        if thorns_x[i] == x and thorns_y[i] == y:\r\n                            del thorns_x[i]\r\n                            del thorns_y[i]\r\n                            del thorns_fl[i]\r\n                if mas_flowers[x][y] in sunfl_anim:\r\n                    for i in range(len(sunfl_x)):\r\n                        if sunfl_x[i] == x and sunfl_y[i] == y:\r\n                            del sunfl_x[i]\r\n                            del sunfl_y[i]\r\n                            del sunfl_fl[i]\r\n                if mas_flowers[x][y] in pee_anim:\r\n                    for i in range(len(pee_x)):\r\n                        if i >= len(pee_x):\r\n                            break\r\n                        if pee_x[i] == x and pee_y[i] == y:\r\n                            del pee_x[i]\r\n                            del pee_y[i]\r\n                            del pee_fl[i]\r\n                            del pee_coult[i]\r\n                            del last_pee_coult[i]\r\n                if mas_flowers[x][y] in dpee_anim:\r\n                    for i in range(len(dpee_x)):\r\n                        if i >= len(dpee_x):\r\n                            break\r\n                        if dpee_x[i] == x and dpee_y[i] == y:\r\n                            del dpee_x[i]\r\n                            del dpee_y[i]\r\n                            del dpee_fl[i]\r\n                            del dpee_coult[i]\r\n                            del last_dpee_coult[i]\r\n                mas_flowers[x][y] = nots\r\n                hp_flowers[x][y] = 0\r\n            cursor = cursor_const\r\n            fl_cursor = \"const\"\r\n\r\n\r\ndef checks():\r\n    for i in range(9):\r\n        for j in range(5):\r\n            if mas_flowers[i][j] == POW:\r\n                mas_flowers[i][j] = nots\r\n\r\n\r\ndef draw_plants():\r\n    global thorns_fl\r\n    global mas_flowers\r\n    time_now = time.time()\r\n    for k in range(len(thorns_fl)):\r\n        if time_now - thorns_fl[k] > 0.2 and mas_flowers[thorns_x[k]][thorns_y[k]] in thorns_anim:\r\n            thorns_fl[k] = time_now\r\n            mas_flowers[thorns_x[k]][thorns_y[k]] = thorns_anim[\r\n                1 - thorns_anim.index(mas_flowers[thorns_x[k]][thorns_y[k]])]\r\n    for k in range(len(tomato_fl)):\r\n        if time_now - tomato_fl[k] > 0.2 and mas_flowers[tomato_x[k]][tomato_y[k]] in tomato_anim:\r\n            tomato_fl[k] = time_now\r\n            mas_flowers[tomato_x[k]][tomato_y[k]] = tomato_anim[\r\n                1 - tomato_anim.index(mas_flowers[tomato_x[k]][tomato_y[k]])]\r\n    for k in range(len(sunfl_fl)):\r\n        if time_now - sunfl_fl[k] > 0.2 and mas_flowers[sunfl_x[k]][sunfl_y[k]] in sunfl_anim:\r\n            sunfl_fl[k] = time_now\r\n            mas_flowers[sunfl_x[k]][sunfl_y[k]] = sunfl_anim[\r\n                1 - sunfl_anim.index(mas_flowers[sunfl_x[k]][sunfl_y[k]])]\r\n    for k in range(len(pee_fl)):\r\n        if time_now - pee_fl[k] > 0.2 and mas_flowers[pee_x[k]][pee_y[k]] in pee_anim:\r\n            pee_fl[k] = time_now\r\n            mas_flowers[pee_x[k]][pee_y[k]] = pee_anim[\r\n                1 - pee_anim.index(mas_flowers[pee_x[k]][pee_y[k]])]\r\n    for k in range(len(dpee_fl)):\r\n        if time_now - dpee_fl[k] > 0.2 and mas_flowers[dpee_x[k]][dpee_y[k]] in dpee_anim:\r\n            dpee_fl[k] = time_now\r\n            mas_flowers[dpee_x[k]][dpee_y[k]] = dpee_anim[\r\n                1 - dpee_anim.index(mas_flowers[dpee_x[k]][dpee_y[k]])]\r\n    for i in range(9):\r\n        for j in range(5):\r\n            screen.blit(mas_flowers[i][j], (i * 155 + 10, j * 155 + 175))\r\n\r\n\r\ndef sun_down_1():\r\n    screen.blit(sun, (1400, 50))\r\n\r\n\r\ndef sun_down_2():\r\n    screen.blit(sun, (1460, 80))\r\n\r\n\r\ndef sun_down_3():\r\n    screen.blit(sun, (1450, 30))\r\n\r\n\r\ndef plants_action():\r\n    global sunflower_times\r\n    global flag_sunflowers\r\n    flag_sunflower = 0\r\n    square_centre = (0, 0)\r\n    for x in range(5):\r\n        for y in range(9):\r\n            if mas_flowers[x][y] in sunfl_anim:\r\n                if time.time() - sunflower_times[x][y] > 13:\r\n                    sunflower_times[x][y] = time.time()\r\n                    square_centre = (x * 155, y * 155 + 155)\r\n                    flag_sunflowers[x][y] = 1\r\n                    screen.blit(sun, square_centre)\r\n\r\n\r\ndef draw_text():\r\n    global score\r\n    text_surface = font.render(str(score), True, (255, 255, 255))\r\n    text_rect = text_surface.get_rect()\r\n    text_rect.midtop = (1300, 935)\r\n    screen.blit(text_surface, text_rect)\r\n\r\n\r\ndef draw_price():\r\n    if fl == \"play\":\r\n        screen.blit(font.render(\"50\", True, black), [105, 100])\r\n        screen.blit(font.render(\"50\", True, black), [255, 100])\r\n        screen.blit(font.render(\"100\", True, black), [385, 100])\r\n        screen.blit(font.render(\"50\", True, black), [560, 100])\r\n        screen.blit(font.render(\"200\", True, black), [690, 100])\r\n        screen.blit(font.render(\"150\", True, black), [845, 100])\r\n        screen.blit(font.render(\"125\", True, black), [995, 100])\r\n\r\n\r\ndef toFixed(numObj, digits=0):\r\n    return abs(float(f\"{numObj:.{digits}f}\"))\r\n\r\n\r\ndef draw_reload():\r\n    if fl == \"play\":\r\n        screen.blit(font.render(str(toFixed(float(reload_tomato), 1)), True, black), [10, 100])\r\n        screen.blit(font.render(str(toFixed(float(reload_sunflower), 1)), True, black), [160, 100])\r\n        screen.blit(font.render(str(toFixed(float(reload_pee), 1)), True, black), [310, 100])\r\n        screen.blit(font.render(str(toFixed(float(reload_nut), 1)), True, black), [460, 100])\r\n        screen.blit(font.render(str(toFixed(float(reload_double_pee), 1)), True, black), [615, 100])\r\n        screen.blit(font.render(str(int(reload_cherry)), True, black), [765, 100])\r\n        screen.blit(font.render(str(toFixed(float(reload_thorns), 1)), True, black), [920, 100])\r\n\r\n\r\ndef draw_sort_zombies(i):\r\n    global zombie_anim_fl, zombies_anim, zombies_x, zombies_y, zombie_eat_fl\r\n    global mas_flowers, zombie_hp\r\n    global pee_coult, pee_y, pee_x, pee_anim, last_pee_coult\r\n    global dpee_coult, dpee_y, dpee_x, dpee_anim, last_dpee_coult\r\n    global pee_shot_coult, pee_shot_y, pee_shot_x, pee_shot_anim\r\n    global kolvo_zombie, zombie_waves, zombie_wave_fl\r\n    if i >= len(zombie_hp):\r\n        return 0\r\n    if zombie_hp[i] <= 0:\r\n        del zombies_x[i]\r\n        del zombie_eat_fl[i]\r\n        del zombies_y[i]\r\n        del zombie_anim_fl[i]\r\n        del zombie_hp[i]\r\n        del zombies_anim[i]\r\n    if i >= len(zombie_eat_fl):\r\n        return 0\r\n    if zombie_eat_fl[i] == 0:\r\n        zombies_x[i] -= 1.4\r\n        screen.blit(anim_number[zombies_anim[i]], (zombies_x[i], zombies_y[i]))\r\n        x1 = zombies_x[i] // 150\r\n        y1 = (zombies_y[i]) // 150\r\n        for y in range(5):\r\n            for x in range(9):\r\n                if mas_flowers[x][y] != nots:\r\n                    if x1 == x and y1 == y:\r\n                        zombie_eat_fl[i] = 1\r\n                if mas_flowers[x][y] in thorns_anim:\r\n                    if x1 == x and y1 == y:\r\n                        zombie_eat_fl[i] = 0\r\n                        zombie_hp[i] -= 0.15\r\n                if mas_flowers[x][y] in tomato_anim:\r\n                    if x1 == x and y1 == y:\r\n                        zombie_hp[i] -= 1000\r\n                        for i in range(len(tomato_x)):\r\n                            if tomato_x[i] == x and tomato_y[i] == y:\r\n                                mas_flowers[x][y] = POW\r\n        if len(zombie_anim_fl) <= i:\r\n            return 0\r\n        if zombie_anim_fl[i] < 6:\r\n            zombie_anim_fl[i] += 1\r\n        elif zombie_anim_fl[i] >= 6:\r\n            zombie_anim_fl[i] = 0\r\n            zombies_anim[i] += 1\r\n            zombies_anim[i] %= 3\r\n    else:\r\n        x1 = int(zombies_x[i] // 150)\r\n        y1 = int(zombies_y[i] // 150)\r\n        if mas_flowers[x1][y1] == nots:\r\n            zombie_eat_fl[i] = 0\r\n            zombies_anim[i] = 0\r\n        dop_trash = zombies_anim[i]\r\n        if dop_trash == 1 or dop_trash == 2:\r\n            zombies_anim[i] = 0\r\n            zombie_anim_fl[i] = 0\r\n        if zombie_anim_fl[i] < 20:\r\n            zombie_anim_fl[i] += 1\r\n        elif zombie_anim_fl[i] == 20:\r\n            zombie_anim_fl[i] = 0\r\n            zombies_anim[i] = 3 - zombies_anim[i]\r\n            for y in range(5):\r\n                for x in range(9):\r\n                    if x1 == x and y1 == y:\r\n                        if x + 1 < 10:\r\n                            if mas_flowers[x + 1][y] in thorns_anim:\r\n                                zombie_hp[i] -= 3\r\n                        hp_flowers[x][y] -= 10\r\n                        if hp_flowers[x][y] == 300:\r\n                            mas_flowers[x][y] = nut_1\r\n                        if hp_flowers[x][y] == 100:\r\n                            mas_flowers[x][y] = nut_2\r\n                        if hp_flowers[x][y] == 0:\r\n                            mas_flowers[x][y] = nots\r\n                            zombie_eat_fl[i] = 0\r\n                            for j1 in range(len(pee_x)):\r\n                                if j1 >= len(pee_x):\r\n                                    break\r\n                                if pee_x[j1] == x and pee_y[j1] == y:\r\n                                    del pee_x[j1]\r\n                                    del pee_y[j1]\r\n                                    del pee_fl[j1]\r\n                                    del pee_coult[j1]\r\n                                    del last_pee_coult[j1]\r\n                            for j2 in range(len(dpee_x)):\r\n                                if j2 >= len(dpee_x):\r\n                                    break\r\n                                if dpee_x[j2] == x and dpee_y[j2] == y:\r\n                                    del dpee_x[j2]\r\n                                    del dpee_y[j2]\r\n                                    del dpee_fl[j2]\r\n                                    del dpee_coult[j2]\r\n                                    del last_dpee_coult[j2]\r\n        screen.blit(anim_number[zombies_anim[i]], (zombies_x[i], zombies_y[i]))\r\n\r\n\r\ndef draw_zombies():\r\n    global zombie_anim_fl, zombies_anim, zombies_x, zombies_y, zombie_eat_fl\r\n    global mas_flowers, zombie_hp\r\n    global pee_coult, pee_y, pee_x, pee_anim, last_pee_coult\r\n    global dpee_coult, dpee_y, dpee_x, dpee_anim, last_dpee_coult\r\n    global pee_shot_coult, pee_shot_y, pee_shot_x, pee_shot_anim\r\n    global kolvo_zombie, zombie_waves, zombie_wave_fl\r\n    if zombie_waves[kolvo_zombie] == 10 or zombie_waves[kolvo_zombie] == 20 or zombie_waves[kolvo_zombie] == 30:\r\n        zombie_wave_fl += 750\r\n    kolvo_zombie = zombie_wave_fl // 750 + 1\r\n    print(zombie_waves[kolvo_zombie])\r\n    zombie_wave_fl += 1\r\n    if fl == \"play\":\r\n        while len(zombies_x) < zombie_waves[kolvo_zombie]:\r\n            zombies_x.append(1700)\r\n            zombies_y.append(zombies_y_const[random.randrange(5)])\r\n            zombie_eat_fl.append(0)\r\n            zombie_anim_fl.append(0)\r\n            zombies_anim.append(0)\r\n            zombie_hp.append(40)\r\n        for i in range(len(zombies_x)):\r\n            if len(zombies_y) > i and (zombies_y[i] - 100) // 150 == 0:\r\n                draw_sort_zombies(i)\r\n        for i in range(len(zombies_x)):\r\n            if len(zombies_y) > i and (zombies_y[i] - 100) // 150 == 1:\r\n                draw_sort_zombies(i)\r\n        for i in range(len(zombies_x)):\r\n            if len(zombies_y) > i and (zombies_y[i] - 100) // 150 == 2:\r\n                draw_sort_zombies(i)\r\n        for i in range(len(zombies_x)):\r\n            if len(zombies_y) > i and (zombies_y[i] - 100) // 150 == 3:\r\n                draw_sort_zombies(i)\r\n        for i in range(len(zombies_x)):\r\n            if len(zombies_y) > i and (zombies_y[i] - 100) // 150 == 4:\r\n                draw_sort_zombies(i)\r\n\r\n\r\ndef draw_sun():\r\n    global prev_time\r\n    global flag_sun_1\r\n    global flag_sun_2\r\n    global flag_sun_3\r\n    if fl == \"play\" and time.time() - prev_time > 14:\r\n        prev_time = time.time()\r\n        if flag_sun_1 == 0:\r\n            flag_sun_1 = 1\r\n        elif flag_sun_2 == 0:\r\n            flag_sun_2 = 1\r\n        else:\r\n            flag_sun_3 = 1\r\n    if flag_sun_1:\r\n        sun_down_1()\r\n    if flag_sun_2:\r\n        sun_down_2()\r\n    if flag_sun_3:\r\n        sun_down_3()\r\n    for y in range(5):\r\n        for x in range(9):\r\n            if flag_sunflowers[x][y] == 1:\r\n                screen.blit(sun, square_centres[x][y])\r\n                sunflower_times[x][y] = time.time()\r\n\r\n\r\ndef draw_pee_shots():\r\n    global pee_coult, pee_shot_y, pee_shot_x, last_pee_coult\r\n    for i in range(len(pee_shot_x)):\r\n        if len(pee_shot_x) <= i:\r\n            i = 0\r\n        screen.blit(pee_shot, (pee_shot_x[i], pee_shot_y[i]))\r\n        pee_shot_x[i] += 10\r\n        for j in range(len(zombies_x)):\r\n            if j >= len(zombies_x) or i >= len(pee_shot_x):\r\n                break\r\n            if abs(zombies_x[j] - pee_shot_x[i]) <= 20 and zombies_y[j] // 150 + 1 == pee_shot_y[i] // 150:\r\n                zombie_hp[j] -= 4\r\n                del pee_shot_x[i]\r\n                del pee_shot_y[i]\r\n        if len(pee_shot_x) <= i:\r\n            break\r\n        if pee_shot_x[i] > 1500:\r\n            if i > len(pee_shot_x):\r\n                break\r\n            del pee_shot_x[i]\r\n            del pee_shot_y[i]\r\n\r\n\r\ndef new_pee_shots():\r\n    global pee_coult, pee_shot_y, pee_shot_x, last_pee_coult\r\n    now_time = time.time()\r\n    for i in range(len(pee_x)):\r\n        for j in range(len(zombies_x)):\r\n            pee_coult[i] = now_time\r\n            if pee_coult[i] - last_pee_coult[i] >= 2 and zombies_y[j] // 150 == pee_y[i] \\\r\n                    and pee_x[i] <= zombies_x[j] // 155 and zombies_x[j] <= 1500:\r\n                pee_shot_x.append((pee_x[i] + 1) * 150 - 40)\r\n                pee_shot_y.append((pee_y[i] + 1) * 150 + 42)\r\n                last_pee_coult[i] = pee_coult[i]\r\n                pee_coult[i] = now_time\r\n            pee_coult[i] = now_time\r\n\r\n\r\ndef new_double_pee_shots():\r\n    global dee_coult, dpee_shot_y, dpee_shot_x, last_dpee_coult, dpee_pps_fl\r\n    now_time = time.time()\r\n    for i in range(len(dpee_x)):\r\n        for j in range(len(zombies_x)):\r\n            dpee_coult[i] = time.time()\r\n            if dpee_coult[i] - last_dpee_coult[i] >= dpee_pps[dpee_pps_fl] and zombies_y[j] // 150 == dpee_y[i] \\\r\n                    and dpee_x[i] <= zombies_x[j] // 155 and zombies_x[j] <= 1500:\r\n                pee_shot_x.append((dpee_x[i] + 1) * 150 - 40)\r\n                pee_shot_y.append((dpee_y[i] + 1) * 150 + 42)\r\n                last_dpee_coult[i] = dpee_coult[i]\r\n                dpee_pps_fl = 1 - dpee_pps_fl\r\n            dpee_coult[i] = now_time\r\n\r\n\r\ndef cherry_bomb():\r\n    global cherry_bomb_fl, cherry_x, cherry_y, Pow_cherry_fl\r\n    time_now = time.time()\r\n    if time_now - cherry_bomb_fl >= 2:\r\n        Pow_cherry_fl = time_now\r\n        cherry_x = -1000\r\n        cherry_y = -1000\r\n        for x in range(9):\r\n            for y in range(5):\r\n                if mas_flowers[x][y] == cherry:\r\n                    mas_flowers[x][y] = Pow_cherry\r\n                    for k in range(len(zombies_x)):\r\n                        if abs(int(zombies_x[k] // 155 - x)) <= 1 and abs(int(zombies_y[k] // 155 - y)) <= 1:\r\n                            zombie_hp[k] = 0\r\n                        if zombie_eat_fl[k] == 1 and zombies_x[k] // 155 == x - 2 \\\r\n                                and abs(int(zombies_y[k] // 155 - y)) <= 1:\r\n                            zombie_hp[k] = 0\r\n                    break\r\n                if mas_flowers[x][y] == Pow_cherry:\r\n                    mas_flowers[x][y] = nots\r\n\r\n\r\ndef reload():\r\n    global reload_nut, reload_double_pee, reload_pee, reload_cherry, reload_tomato, reload_sunflower, reload_thorns\r\n    global last_reload_nut, last_reload_double_pee, last_reload_pee, last_reload_cherry, \\\r\n        last_reload_tomato, last_reload_sunflower, last_reload_thorns\r\n    i = 0.037\r\n    now = time.time()\r\n    if reload_nut > 0 and now - last_reload_nut >= i:\r\n        last_reload_nut -= i\r\n        reload_nut -= i\r\n    if reload_sunflower > 0 and now - last_reload_sunflower >= i:\r\n        last_reload_sunflower -= i\r\n        reload_sunflower -= i\r\n    if reload_thorns > 0 and now - last_reload_thorns >= i:\r\n        last_reload_thorns -= i\r\n        reload_thorns -= i\r\n    if reload_pee > 0 and now - last_reload_pee >= i:\r\n        last_reload_pee -= i\r\n        reload_pee -= i\r\n    if reload_double_pee > 0 and now - last_reload_double_pee >= i:\r\n        last_reload_double_pee = i\r\n        reload_double_pee -= i\r\n    if reload_cherry > 0 and now - last_reload_cherry >= i:\r\n        last_reload_cherry -= i\r\n        reload_cherry -= i\r\n    if reload_tomato > 0 and now - last_reload_tomato >= i:\r\n        last_reload_tomato -= i\r\n        reload_tomato -= i\r\n\r\n\r\ndef win_text():\r\n    screen.blit(font.render(\"win\", True, black), [750, 500])\r\n\r\n\r\nif __name__ == '__main__':\r\n    pygame.init()\r\n    pygame.display.set_caption(\"Plants vs zombos\")\r\n    size = width, height = 1500, 1000\r\n    screen = pygame.display.set_mode(size)\r\n    pygame.mouse.set_visible(False)\r\n    clock = pygame.time.Clock()\r\n    clock_time = pygame.time.Clock()\r\n    cursor_const = cursor = pygame.image.load(\"cursor.png\")\r\n    fl_cursor = \"const\"\r\n    nots = pygame.image.load(\"not.png\")\r\n    win_fl = 0\r\n    mas_flowers = [[nots] * 10 for i in range(10)]\r\n    hp_flowers = [[0] * 10 for i in range(10)]\r\n    for i in range(9):\r\n        for j in range(5):\r\n            mas_flowers[i][j] = nots\r\n            hp_flowers[i][j] = 0\r\n    black = pygame.Color(\"black\")\r\n    zombies_x = []\r\n    zombies_y = []\r\n    zombies_y_const = [100, 250, 400, 550, 700]\r\n    zombies_anim = []\r\n    zombie_anim_1 = pygame.image.load(\"zombie_const.png\")\r\n    zombie_anim_2 = pygame.image.load(\"zombie_rightleg.png\")\r\n    zombie_anim_3 = pygame.image.load(\"zombie_leftleg.png\")\r\n    zombie_anim_4 = pygame.image.load(\"zombie_eat.png\")\r\n    anim_number = [zombie_anim_1, zombie_anim_2, zombie_anim_3, zombie_anim_4]\r\n    zombie_eat_fl = []\r\n    zombie_anim_fl = []\r\n    zombie_helmet = []\r\n    zombie_hp = []\r\n    zombie_waves = [0, 1, 2, 4, 10, 5, 4, 7, 20, 11, 9, 13, 30, 0]\r\n    zombie_wave_fl = -400\r\n    kolvo_zombie = 0\r\n    font_name = pygame.font.match_font('arial')\r\n    font = pygame.font.Font(font_name, 50)\r\n    background = pygame.image.load(\"background.png\").convert()\r\n    help_background = pygame.image.load(\"help_background.png\").convert()\r\n    play_background = pygame.image.load(\"game_background.png\").convert()\r\n    Bplay = pygame.image.load(\"button_play.png\").convert()\r\n    Hplay = pygame.image.load(\"button_help.png\").convert()\r\n    Eplay = pygame.image.load(\"button_exit.png\").convert()\r\n    H_back = pygame.image.load(\"back_help.png\").convert()\r\n    page = pygame.image.load(\"page.png\").convert()\r\n    tomato_1 = tomato = pygame.image.load(\"tomato_skin_1.png\")\r\n    tomato_2 = pygame.image.load(\"tomato_skin_2.png\")\r\n    tomato_x = []\r\n    tomato_y = []\r\n    tomato_fl = []\r\n    tomato_anim = [tomato_1, tomato_2]\r\n    sunfl_1 = sunflower = pygame.image.load(\"sunflower_skin_1.png\")\r\n    sunfl_2 = pygame.image.load(\"sunflower_skin_2.png\")\r\n    sunfl_x = []\r\n    sunfl_y = []\r\n    sunfl_fl = []\r\n    sunfl_anim = [sunfl_1, sunfl_2]\r\n    nut = pygame.image.load(\"nut.png\")\r\n    nut_1 = pygame.image.load(\"nut_2.png\")\r\n    nut_2 = pygame.image.load(\"nut_3.png\")\r\n    pee = pee_1 = pygame.image.load(\"pee_skin_1.png\")\r\n    pee_2 = pygame.image.load(\"pee_skin_2.png\")\r\n    pee_anim = [pee_1, pee_2]\r\n    pee_fl = []\r\n    pee_x = []\r\n    pee_y = []\r\n    pee_coult = []\r\n    last_pee_coult = []\r\n    dpee_pps = [2, 0.3]\r\n    dpee_pps_fl = 0\r\n    double_pee = dpee_1 = pygame.image.load(\"double_pee_skin_1.png\")\r\n    dpee_2 = pygame.image.load(\"double_pee_skin_2.png\")\r\n    dpee_anim = [dpee_1, dpee_2]\r\n    dpee_fl = []\r\n    dpee_x = []\r\n    dpee_y = []\r\n    dpee_coult = []\r\n    last_dpee_coult = []\r\n    pee_shot = pygame.image.load(\"pee_shot.png\")\r\n    pee_shot_x = []\r\n    pee_shot_y = []\r\n    cherry = pygame.image.load(\"cherry.png\")\r\n    cherry_bomb_fl = time.time()\r\n    Pow_cherry_fl = 100000000\r\n    cherry_x = -1000\r\n    cherry_y = -1000\r\n    thorns = thorns_1 = pygame.image.load(\"thorns_skin_1.png\")\r\n    thorns_2 = pygame.image.load(\"thorns_skin_2.png\")\r\n    thorns_anim = [thorns_1, thorns_2]\r\n    thorns_fl = []\r\n    thorns_x = []\r\n    thorns_y = []\r\n    shovel = pygame.image.load(\"shovel.png\")\r\n    sun = pygame.image.load(\"sun.png\")\r\n    POW = pygame.image.load(\"POW.png\")\r\n    Pow_cherry = pygame.image.load(\"Pow_cherry.png\")\r\n    sun = pygame.transform.scale(sun, (50, 50))\r\n    pos_mouse_x = -100\r\n    pos_mouse_y = -100\r\n    fl = \"start\"\r\n    score = 5000.\r\n    reload_sunflower = reload_tomato = reload_pee = reload_double_pee = reload_nut = reload_thorns = reload_cherry = 0\r\n    last_reload_sunflower = last_reload_tomato = last_reload_pee = last_reload_double_pee \\\r\n        = last_reload_nut = last_reload_thorns = last_reload_cherry = 0\r\n    pygame.mixer.music.load('music_start.mp3')\r\n    pygame.mixer.music.play()\r\n    running = True\r\n    open_windows()\r\n    clock_time.tick(60)\r\n    pygame.display.flip()\r\n    time_fl = 0\r\n    cost = {pee: 100, nut: 50, cherry: 150, tomato: 50, thorns: 50, double_pee: 200, sunflower: 50}\r\n    sunflower_times = [[100000000000 for _ in range(5)] for _ in range(9)]\r\n    flag_sunflowers = [[0 for _ in range(5)] for _ in range(9)]\r\n    square_centres = [[(y * 155, x * 155 + 155) for x in range(9)] for y in range(5)]\r\n    pygame.mixer.music.set_volume(0.5)\r\n    volume = pygame.mixer.music.get_volume()\r\n    prev_time = 0\r\n    flag_sun_1 = 0\r\n    flag_sun_2 = 0\r\n    flag_sun_3 = 0\r\n    mouse_x = -100\r\n    mouse_y = -100\r\n    # ---------------------------------------------\r\n    while running:\r\n        for event in pygame.event.get():\r\n            if event.type == pygame.QUIT:\r\n                running = False\r\n            if event.type == pygame.MOUSEBUTTONDOWN and event.button == 1:\r\n                if fl == \"start\":\r\n                    button_check_start(pygame.mouse.get_pos())\r\n                if fl == \"help\":\r\n                    button_check_help(pygame.mouse.get_pos())\r\n                if fl == \"play\":\r\n                    button_check_play(pygame.mouse.get_pos())\r\n            elif event.type == pygame.KEYDOWN:\r\n                if event.key == pygame.K_LEFT:\r\n                    if volume > 0:\r\n                        volume -= 0.1\r\n                    pygame.mixer.music.set_volume(volume)\r\n                elif event.key == pygame.K_RIGHT:\r\n                    if volume < 1:\r\n                        volume += 0.1\r\n                    pygame.mixer.music.set_volume(volume)\r\n            if event.type == pygame.MOUSEBUTTONDOWN and event.button == 3:\r\n                cursor = cursor_const\r\n                fl_cursor = \"const\"\r\n            mouse_x, mouse_y = pygame.mouse.get_pos()[0], pygame.mouse.get_pos()[1]\r\n            pygame.display.flip()\r\n            clock.tick(60)\r\n            pygame.display.set_caption(\"fps: \" + str(clock.get_fps()))\r\n        pygame.time.Clock().tick()\r\n        now = pygame.time.get_ticks()\r\n        open_windows()\r\n        if win_fl == 0:\r\n            draw_plants()\r\n            new_pee_shots()\r\n            new_double_pee_shots()\r\n            draw_pee_shots()\r\n            draw_price()\r\n            draw_reload()\r\n            draw_zombies()\r\n            cherry_bomb()\r\n            draw_sun()\r\n            reload()\r\n        else:\r\n            win_text()\r\n            cursor = cursor_const\r\n        draw_cursor((mouse_x, mouse_y))\r\n        pygame.display.flip()\r\npygame.quit()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.py b/main.py
--- a/main.py	(revision da04267a5c2833dec6ab3efe4704bdfae8f74aa4)
+++ b/main.py	(date 1614177864028)
@@ -700,7 +700,7 @@
     pos_mouse_x = -100
     pos_mouse_y = -100
     fl = "start"
-    score = 5000.
+    score = 500
     reload_sunflower = reload_tomato = reload_pee = reload_double_pee = reload_nut = reload_thorns = reload_cherry = 0
     last_reload_sunflower = last_reload_tomato = last_reload_pee = last_reload_double_pee \
         = last_reload_nut = last_reload_thorns = last_reload_cherry = 0
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectRootManager\" version=\"2\" project-jdk-name=\"Python 3.9\" project-jdk-type=\"Python SDK\" />\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision da04267a5c2833dec6ab3efe4704bdfae8f74aa4)
+++ b/.idea/misc.xml	(date 1614177765322)
@@ -1,4 +1,4 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.9" project-jdk-type="Python SDK" />
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.7 (projectYandexLyceum)" project-jdk-type="Python SDK" />
 </project>
\ No newline at end of file
Index: .idea/projectYandexLyceum.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<module type=\"PYTHON_MODULE\" version=\"4\">\r\n  <component name=\"NewModuleRootManager\">\r\n    <content url=\"file://$MODULE_DIR$\">\r\n      <excludeFolder url=\"file://$MODULE_DIR$/venv\" />\r\n    </content>\r\n    <orderEntry type=\"jdk\" jdkName=\"Python 3.9\" jdkType=\"Python SDK\" />\r\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\r\n  </component>\r\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/projectYandexLyceum.iml b/.idea/projectYandexLyceum.iml
--- a/.idea/projectYandexLyceum.iml	(revision da04267a5c2833dec6ab3efe4704bdfae8f74aa4)
+++ b/.idea/projectYandexLyceum.iml	(date 1614177765347)
@@ -4,7 +4,7 @@
     <content url="file://$MODULE_DIR$">
       <excludeFolder url="file://$MODULE_DIR$/venv" />
     </content>
-    <orderEntry type="jdk" jdkName="Python 3.9" jdkType="Python SDK" />
+    <orderEntry type="inheritedJdk" />
     <orderEntry type="sourceFolder" forTests="false" />
   </component>
 </module>
\ No newline at end of file
